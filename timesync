#! /usr/bin/env python

import argparse
import datetime
import errno
import json
import os

import requests
import pylev


config = {}


template = """Project: 
Activity: 
Duration: 
"""


def get_checkin_with_editor():
    args = {}
    tmp_file_name = '/tmp/timesync-checkin'
    editor = config.get('editor') or os.environ.get('EDITOR') or 'vi'
    with open(tmp_file_name, 'w') as f:
        f.write(template)
    pid = os.fork()
    if pid == 0: # If child process
        os.execvp(editor, [editor])
    else: # Else parent process
        os.wait(pid)
        args = {}
        # TODO: create a more robust way to read data from the file
        with open(tmp_file_name, 'r') as f:
            args['project'] = f.readline().replace('Project: ')
            args['activity'] = f.readline().replace('Activity: ')
            args['duration'] = f.readline().replace('Duration: ')
            validate_args(args)
        result = submit_time(args)
        print 'Submission Successful!'


def current_date():
    """ Returns today's date with the time of day stripped off. """
    return str(datetime.datetime.now()).split()[0]


def currently_logged_in_user():
    """ Returns the user running the command. """
    return os.environ['USER']


def get_list(endpoint):
    """ Returns a list of items from an endpoint.
        Ex. /projects will return a list of projects
    """
    global config
    base_url = config['url']
    request_url = '{}/{}'.format(base_url, endpoint)
    r = requests.get(request_url)
    if r.status_code != 200:
        sys.stderr.write(
            'Domain %s at endpoint: %s \
            retrieved a non-200 status code.'.format(base_url, endpoint))
        exit(error.EBADRQC)
    return r.json()


def get_options(endpoint, key):
    """ Returns a key from a list by endpoint. """
    return map(lambda x: x[key], get_list(endpoint))


def get_suggestion(arg, opts):
    """ Returns a suggestion based on levenshtein distance. """
    suggestions = map(lambda x: (x, pylev.levenshtein(arg, x)), opts)
    suggestions = sorted(suggestions, key=lambda x: x[1])

    # Grab the closest match < 2 characters off.
    if suggestions[0][1] <= 2:
        return suggestions[0][0]
    return None


def validate(arg, endpoint, key):
    """ Validate an argument against a list of keys. """
    opts = get_options(endpoint, key)
    if arg in opts or not opts:
        return (True, None)

    suggestion = get_suggestion(arg, opts)
    return (False, suggestion)


def submit_time(args):
    resp = requests.post(URL + 'time/add', params=args)
    if resp.status_code != 200:
        sys.stderr.write('Response did not return a 200 error code.\n')
        sys.stderr.write('Response:\n')
        sys.stderr.write('\tStatus Code: %d\n' % resp.status_code)
        sys.stderr.write('\tMessage: %s\n' % resp.text)
        exit(1)
    return resp.text


def parse_all_args():
    """ Parse arguments. """
    parser = argparse.ArgumentParser(prog="Timesync CLI")
    parser.add_argument('-p', '--project',
                        help='Project Name',
                        required=True)
    parser.add_argument('-d', '--duration',
                        help='Duration (in minutes)',
                        required=True,
                        type=int)
    parser.add_argument('-u', '--user',
                        help='Username (Defaults to currently logged in user)',
                        required=False,
                        default=currently_logged_in_user())
    parser.add_argument('-a', '--activity',
                        help='Activity Slug (Meeting, Dev, Tickets, etc.)',
                        required=True)
    parser.add_argument('-n', '--notes',
                        help='Notes on activity worked',
                        default='')
    parser.add_argument('-i', '--issue-uri',
                        help='Issue URI (Default: None)',
                        default='')
    parser.add_argument('--date',
                        help='Date Worked (Default is the current day)',
                        default=current_date())
    parser.add_argument('-e', '--use-editor',
                        help='Open the user\'s favorite editor to get data',
                        required=false)

    return parser.parse_args()


def read_config():
    """Returns a dictionary representing the contents of the json file
    $HOME/timesyncconf.json or a set of sensible defaults if that file does
    not exist.
    """
    sensible_defaults = {
        'url': 'http://localhost:3000',
        'editor': 'vi',
    }
    # If $HOME isn't root base_path should be root.
    base_path = os.environ.get('HOME') or '/'
    path ='{}/.timesyncconf.json'.format(base_path)
    if os.path.isfile(path):
        with open(path, 'r') as f:
            contents = json.load(f)
            return sensible_defaults.update(contents)
    else:
        return sensible_defaults


def validate_args(args):
    # Validate correct projects, usernames, and activities
    invalid_args = []
    valid, suggestion = validate(args.get('project'), 'projects', 'name')
    if not valid:
        invalid_args.append(('project', args.get('project'), suggestion))

    if not config.get('username'):
        valid, suggestion = validate(args.get('user'), 'users', 'username')
        if not valid:
            invalid_args.append(('username', args.get('args.user'), suggestion))

    valid, suggestion = validate(args.get('activity'), 'activities', 'slug')
    if not valid:
        invalid_args.append(('activity', args.get('activity'), suggestion))

    if args.get('duration') and not args.get('duration').isdigit():
        invalid_args.append(('duration', args.get('duration'),
                            'should be an integer value representing minutes')

    print_args_diagnostides(invalid_args)
    if invalid_args:
        exit(errno.EINVAL)


if __name__ == '__main__':
    config = read_config()
    args = parse_all_args()
    args = vars(args)
    validate_args(args)
    result = submit_time(args)
    print 'Submission Successful!'
    for k, v in args.items():
        if v:
            print '\t%s: %s' % (k.capitalize(), v)
